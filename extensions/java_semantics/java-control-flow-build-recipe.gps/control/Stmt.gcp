package control;

recipe Stmt(node root, node exit, out node entry) {
	// Recipe for handling all subtypes of the abstract type 'Stmt'.

	choice entry := AbsVarDecl(root, exit);
	or entry := AssertStmt(root, exit);
	or entry := Block(root, exit);
	or entry := BranchStmt(root, exit);
	or entry := CaseStmt(root, exit);
	or entry := DoStmt(root, exit);
	or entry := EmptyStmt(root, exit);
	or entry := ExplicitConsCall(root, exit);
	or entry := Expr(root, exit);
	or entry := ForeachStmt(root, exit);
	or entry := ForStmt(root, exit);
	or entry := IfStmt(root, exit);
	or entry := LabeledStmt(root, exit);
	or entry := ReturnStmt(root, exit);
	or entry := SubRoutineStmt(root, exit);
	or entry := SwitchStmt(root, exit);
	or entry := ThrowStmt(root, exit);
	or entry := TypeDecl(root, exit);
	or entry := WhileStmt(root, exit);
}
