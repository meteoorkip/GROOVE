package control;

recipe IfStmt(node root, node exit, out node entry) {
	// Match the condition and then statement, which are required.
	node croot, troot := rule.IfStmt-IfThen(root);
	// Build the condition.
	entry := Expr(croot, root);
	// Build the then statement.
	node tentry := Stmt(troot, exit);
	// Try to match the else statement, if it exists.
	node eentry;
	try {
		node eroot := rule.IfStmt-Else(root);
		// Build the else statement.
		eentry := Stmt(eroot, exit);
	} else {
		// No else.
		eentry := rule.help.assign(exit);
	}
	// Wrap the build as we traverse back in the AST when returning from the recursion.
	rule.IfStmt-Up(root, croot, tentry, eentry);
}
